class MangaTranslator {
    constructor() {
        this.originalImage = null;
        this.translatedImage = null;
        this.worker = null;
        this.textRegions = [];
        this.isTesseractReady = false;
        
        this.initializeElements();
        this.initializeTesseract();
    }

    initializeElements() {
        this.imageInput = document.getElementById('imageInput');
        this.translateBtn = document.getElementById('translateBtn');
        this.downloadBtn = document.getElementById('downloadBtn');
        this.originalCanvas = document.getElementById('originalCanvas');
        this.translatedCanvas = document.getElementById('translatedCanvas');
        this.debugOutput = document.getElementById('debugOutput');

        this.imageInput.addEventListener('change', (e) => this.handleImageUpload(e));
        this.translateBtn.addEventListener('click', () => this.translateImage());
        this.downloadBtn.addEventListener('click', () => this.downloadImage());
    }

    async initializeTesseract() {
        try {
            this.log('üöÄ ƒêang kh·ªüi t·∫°o Tesseract OCR...');
            
            // C√°ch kh·ªüi t·∫°o m·ªõi cho Tesseract.js v4
            const { createWorker } = Tesseract;
            this.worker = createWorker({
                logger: progress => {
                    if (progress.status === 'recognizing text') {
                        this.log(`OCR: ${Math.round(progress.progress * 100)}%`);
                    }
                }
            });

            await this.worker.load();
            await this.worker.loadLanguage('eng');
            await this.worker.initialize('eng');
            
            // C·∫•u h√¨nh cho text manga
            await this.worker.setParameters({
                tessedit_pageseg_mode: '7', // PSM_SINGLE_LINE
                tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 .,!?-()[]\'\"/',
            });

            this.isTesseractReady = true;
            this.log('‚úÖ Tesseract ƒë√£ s·∫µn s√†ng');
        } catch (error) {
            this.log(`‚ùå L·ªói kh·ªüi t·∫°o Tesseract: ${error.message}`);
            this.isTesseractReady = false;
        }
    }

    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        this.debugOutput.textContent += `[${timestamp}] ${message}\n`;
        this.debugOutput.scrollTop = this.debugOutput.scrollHeight;
        console.log(message);
    }

    handleImageUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            this.originalImage = new Image();
            this.originalImage.onload = () => {
                this.displayImage(this.originalImage, this.originalCanvas);
                this.translateBtn.disabled = false;
                this.log(`‚úÖ ƒê√£ t·∫£i ·∫£nh: ${file.name} (${this.originalImage.width}x${this.originalImage.height})`);
            };
            this.originalImage.onerror = () => {
                this.log('‚ùå L·ªói t·∫£i ·∫£nh');
            };
            this.originalImage.src = e.target.result;
        };
        reader.onerror = () => {
            this.log('‚ùå L·ªói ƒë·ªçc file');
        };
        reader.readAsDataURL(file);
    }

    displayImage(img, canvas) {
        const ctx = canvas.getContext('2d');
        // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc hi·ªÉn th·ªã
        const maxWidth = 600;
        const scale = Math.min(1, maxWidth / img.width);
        
        canvas.width = img.width * scale;
        canvas.height = img.height * scale;
        
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
    }

    async translateImage() {
        if (!this.originalImage) {
            this.log('‚ùå Ch∆∞a c√≥ ·∫£nh ƒë·ªÉ d·ªãch');
            return;
        }

        if (!this.isTesseractReady) {
            this.log('‚ùå Tesseract ch∆∞a s·∫µn s√†ng');
            return;
        }

        this.translateBtn.disabled = true;
        this.log('üéØ B·∫Øt ƒë·∫ßu d·ªãch...');

        try {
            // B∆∞·ªõc 1: Nh·∫≠n di·ªán text v·ªõi Tesseract
            this.log('üîç ƒêang nh·∫≠n di·ªán text...');
            
            const result = await this.worker.recognize(this.originalImage);
            this.log(`üìä K·∫øt qu·∫£ OCR: ${JSON.stringify(result.data).substring(0, 200)}...`);
            
            if (result && result.data && result.data.words) {
                this.textRegions = result.data.words.filter(word => 
                    word.confidence > 30 && word.text && word.text.trim().length > 0
                );
                this.log(`üìù T√¨m th·∫•y ${this.textRegions.length} v√πng text`);

                // Hi·ªÉn th·ªã c√°c text t√¨m th·∫•y
                this.textRegions.forEach((region, index) => {
                    this.log(`üìñ [${index + 1}] "${region.text}" (ƒë·ªô tin c·∫≠y: ${region.confidence}%)`);
                });

                // B∆∞·ªõc 2: T·∫°o ·∫£nh ƒë√£ d·ªãch
                await this.createTranslatedImage();

                this.downloadBtn.disabled = false;
                this.log('‚úÖ Ho√†n th√†nh d·ªãch!');
            } else {
                this.log('‚ùå Kh√¥ng t√¨m th·∫•y text trong ·∫£nh');
                // Th·ª≠ ph∆∞∆°ng ph√°p fallback
                await this.fallbackTranslation();
            }

        } catch (error) {
            this.log(`‚ùå L·ªói d·ªãch ·∫£nh: ${error.message}`);
            console.error('Chi ti·∫øt l·ªói:', error);
            // Th·ª≠ ph∆∞∆°ng ph√°p fallback
            await this.fallbackTranslation();
        } finally {
            this.translateBtn.disabled = false;
        }
    }

    async fallbackTranslation() {
        this.log('üîÑ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p fallback...');
        
        try {
            // T·∫°o canvas t·ª´ ·∫£nh g·ªëc
            const canvas = this.translatedCanvas;
            const ctx = canvas.getContext('2d');
            
            canvas.width = this.originalImage.width;
            canvas.height = this.originalImage.height;
            ctx.drawImage(this.originalImage, 0, 0);
            
            // Th√™m th√¥ng b√°o
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.fillRect(50, 50, canvas.width - 100, 100);
            
            ctx.fillStyle = 'red';
            ctx.font = 'bold 24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Kh√¥ng th·ªÉ nh·∫≠n di·ªán text', canvas.width / 2, 100);
            ctx.fillText('Vui l√≤ng th·ª≠ ·∫£nh kh√°c', canvas.width / 2, 130);
            
            this.downloadBtn.disabled = false;
            this.log('‚úÖ ƒê√£ t·∫°o ·∫£nh fallback');
        } catch (error) {
            this.log(`‚ùå L·ªói fallback: ${error.message}`);
        }
    }

    async createTranslatedImage() {
        const canvas = this.translatedCanvas;
        const ctx = canvas.getContext('2d');
        
        // Copy ·∫£nh g·ªëc
        canvas.width = this.originalImage.width;
        canvas.height = this.originalImage.height;
        ctx.drawImage(this.originalImage, 0, 0);

        // X·ª≠ l√Ω t·ª´ng v√πng text
        let translatedCount = 0;
        
        for (const region of this.textRegions) {
            try {
                const success = await this.processTextRegion(ctx, region);
                if (success) translatedCount++;
                
                // Ngh·ªâ gi·ªØa c√°c l·∫ßn d·ªãch ƒë·ªÉ tr√°nh rate limit
                await new Promise(resolve => setTimeout(resolve, 500));
            } catch (error) {
                this.log(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω v√πng text: ${error.message}`);
            }
        }
        
        this.log(`‚úÖ ƒê√£ d·ªãch ${translatedCount}/${this.textRegions.length} v√πng text`);
    }

    async processTextRegion(ctx, region) {
        const { text, bbox } = region;
        
        if (!text || !bbox) return false;

        const { x0, y0, x1, y1 } = bbox;
        const cleanText = text.trim();
        
        if (cleanText.length < 1) return false;

        this.log(`üìù ƒêang d·ªãch: "${cleanText}"`);

        // D·ªãch text
        const translatedText = await this.translateText(cleanText);
        
        if (!translatedText || translatedText === cleanText) {
            this.log(`‚ö†Ô∏è Kh√¥ng d·ªãch ƒë∆∞·ª£c: "${cleanText}"`);
            return false;
        }

        this.log(`üåê ‚Üí "${translatedText}"`);

        // T√≠nh to√°n k√≠ch th∆∞·ªõc box
        const padding = 10;
        const boxX = Math.max(0, x0 - padding);
        const boxY = Math.max(0, y0 - padding);
        const boxWidth = Math.min(ctx.canvas.width - boxX, (x1 - x0) + padding * 2);
        const boxHeight = Math.min(ctx.canvas.height - boxY, (y1 - y0) + padding * 2);

        // V·∫Ω n·ªÅn tr·∫Øng
        ctx.fillStyle = 'white';
        ctx.fillRect(boxX, boxY, boxWidth, boxHeight);

        // V·∫Ω vi·ªÅn
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 2;
        ctx.strokeRect(boxX, boxY, boxWidth, boxHeight);

        // T√¨m font size ph√π h·ª£p
        const fontSize = this.findOptimalFontSize(ctx, translatedText, boxWidth - 10, boxHeight - 10);
        ctx.font = `${fontSize}px Arial`;
        ctx.fillStyle = 'black';
        ctx.textBaseline = 'middle';
        ctx.textAlign = 'center';

        // V·∫Ω text ƒë√£ d·ªãch
        const textX = boxX + boxWidth / 2;
        const textY = boxY + boxHeight / 2;
        ctx.fillText(translatedText, textX, textY);

        return true;
    }

    findOptimalFontSize(ctx, text, maxWidth, maxHeight) {
        let fontSize = 20;
        ctx.font = `${fontSize}px Arial`;
        let textWidth = ctx.measureText(text).width;
        
        while ((textWidth > maxWidth || fontSize > maxHeight) && fontSize > 8) {
            fontSize--;
            ctx.font = `${fontSize}px Arial`;
            textWidth = ctx.measureText(text).width;
        }
        
        return fontSize;
    }

    async translateText(text) {
        // T·ª´ ƒëi·ªÉn d·ªãch m·∫´u cho manga
        const dictionary = {
            'actually': 'th·ª±c ra',
            'interested': 'quan t√¢m',
            'novelist': 'nh√† vƒÉn',
            'happy': 'h·∫°nh ph√∫c',
            'seriously': 'nghi√™m t√∫c',
            'pretty': 'kh√°',
            'nice': 't·ªët',
            'period': 'ti·∫øt h·ªçc',
            'bell': 'chu√¥ng',
            'confess': 't·ªè t√¨nh',
            'might': 'c√≥ l·∫Ω',
            'wanted': 'mu·ªën',
            'novelist': 'ti·ªÉu thuy·∫øt gia',
            'hell': 'qu·ª∑',
            'first': 'ƒë·∫ßu ti√™n',
            'always': 'lu√¥n lu√¥n',
            'turn': 'l∆∞·ª£t',
            'ding': 'ting'
        };

        // T√¨m c√°c t·ª´ trong t·ª´ ƒëi·ªÉn
        const words = text.toLowerCase().split(/\s+/);
        const translatedWords = words.map(word => {
            // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
            const cleanWord = word.replace(/[^a-zA-Z]/g, '');
            return dictionary[cleanWord] || word;
        });

        return translatedWords.join(' ');
    }

    downloadImage() {
        try {
            const link = document.createElement('a');
            link.download = `translated-${Date.now()}.png`;
            link.href = this.translatedCanvas.toDataURL('image/png');
            link.click();
            this.log('üíæ ƒê√£ t·∫£i ·∫£nh xu·ªëng');
        } catch (error) {
            this.log(`‚ùå L·ªói t·∫£i ·∫£nh: ${error.message}`);
        }
    }
}

// Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
document.addEventListener('DOMContentLoaded', () => {
    new MangaTranslator();
});